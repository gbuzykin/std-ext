// Lexegen autogenerated analyzer file - do not edit!

static uint8_t symb2meta[256] = {
    0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 3, 1, 1, 1, 1,
    1, 1, 1, 1, 4, 1, 4, 5, 6, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 10, 9, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 1, 1, 1, 1, 12, 13, 9, 9, 14, 15, 1, 1, 1, 1, 1, 16, 1, 17, 1, 1,
    1, 18, 19, 20, 21, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
};

static int8_t Dtran[43][22] = {
    {
        -1, -1, 19, -1, 20, -1, 21, 22, 23, -1, -1, -1, -1, -1, -1, 24, -1, 25, -1, -1, 26, -1
    }, {
        -1, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    }, {
        -1, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2
    }, {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    }, {
        -1, 5, 5, 6, 5, 5, 7, 5, 5, 5, 5, 8, 5, 9, 5, 10, 5, 11, 12, 5, 13, 14
    }, {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, 15, 15, 15, 15, -1, 15, 15, 15, 15, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, 16, 16, 16, 16, -1, 16, 16, 16, 16, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, 17, 17, 17, 17, -1, 17, 17, 17, 17, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, 18, 18, 18, 18, -1, 18, 18, 18, 18, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, 22, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, 37, -1, -1, -1, -1, 38, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, 37, -1, 23, 23, -1, 38, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30
    }, {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28
    }, {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 32, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, 41, 41, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, 39, -1, -1, 40, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, 40, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, 40, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, 41, 41, -1, 38, -1, -1, -1, 38, -1, -1, -1, -1, -1, -1, -1
    }, {
        -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1
    }
};

static int accept[43] = {
    0, 0, 11, 12, 0, 10, 1, 3, 2, 4, 5, 6, 7, 8, 10, 0, 0, 0, 9, 19, 0, 0, 16, 16, 0, 0, 0, 0, 0, 14, 0, 0, 13, 0, 0, 0,
    15, 0, 0, 0, 17, 17, 18
};

static int lex(const char* first, const char* last, int8_t** p_sptr, unsigned* p_llen, int has_more) {
    int8_t *sptr = *p_sptr, *sptr0 = sptr - *p_llen;
    int8_t state = *(sptr - 1);
    while (first < last) {  // Analyze till transition is impossible
        state = Dtran[state][symb2meta[static_cast<unsigned char>(*first)]];
        if (state < 0) { goto unroll; }
        *sptr++ = state, ++first;
    }
    if (has_more || sptr == sptr0) {
        *p_sptr = sptr;
        *p_llen = static_cast<unsigned>(sptr - sptr0);
        return err_end_of_input;
    }
unroll:
    *p_sptr = sptr0;
    while (sptr != sptr0) {  // Unroll down-to last accepting state
        state = *(sptr - 1);
        int n_pat = accept[state];
        if (n_pat > 0) {
            *p_llen = static_cast<unsigned>(sptr - sptr0);
            return n_pat;
        }
        --sptr;
    }
    *p_llen = 1;  // Accept at least one symbol as default pattern
    return predef_pat_default;
}
